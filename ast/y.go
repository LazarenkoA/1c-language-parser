// Code generated by goyacc .\grammar.y. DO NOT EDIT.

//line .\grammar.y:1

package ast

import __yyfmt__ "fmt"

//line .\grammar.y:3

//line .\grammar.y:42
type yySymType struct {
	yys                        int
	token                      Token
	stmt_if                    *IfStatement
	opt_elseif_list            Statements
	opt_else                   Statements
	stmt                       Statement
	stmt_loop                  *LoopStatement
	funcProc                   *FunctionOrProcedure
	body                       Statements
	opt_body                   Statements
	declarations_method_params []ParamStatement
	declarations_method_param  ParamStatement
	exprs                      ExprStatements
	opt_export                 *Token
	opt_directive              *Token
	explicit_variables         map[string]VarStatement
	global_variables           []GlobalVariables
	opt_explicit_variables     map[string]VarStatement
	identifiers                []Token
	goToLabel                  *GoToLabelStatement
	opt_goToLabel              *GoToLabelStatement
}

const Directive = 57346
const token_identifier = 57347
const Procedure = 57348
const Var = 57349
const EndProcedure = 57350
const If = 57351
const Then = 57352
const ElseIf = 57353
const Else = 57354
const EndIf = 57355
const For = 57356
const Each = 57357
const In = 57358
const To = 57359
const Loop = 57360
const EndLoop = 57361
const Break = 57362
const Not = 57363
const ValueParam = 57364
const While = 57365
const GoToLabel = 57366
const Continue = 57367
const Try = 57368
const Catch = 57369
const EndTry = 57370
const Number = 57371
const String = 57372
const New = 57373
const Function = 57374
const EndFunction = 57375
const Return = 57376
const Throw = 57377
const NeEQ = 57378
const EQUAL = 57379
const LE = 57380
const GE = 57381
const OR = 57382
const And = 57383
const True = 57384
const False = 57385
const Undefind = 57386
const Export = 57387
const Date = 57388
const GoTo = 57389
const Execute = 57390
const LOW_PREC = 57391
const UNARMinus = 57392
const UNARYPlus = 57393

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"':'",
	"';'",
	"','",
	"Directive",
	"token_identifier",
	"Procedure",
	"Var",
	"EndProcedure",
	"If",
	"Then",
	"ElseIf",
	"Else",
	"EndIf",
	"For",
	"Each",
	"In",
	"To",
	"Loop",
	"EndLoop",
	"Break",
	"Not",
	"ValueParam",
	"While",
	"GoToLabel",
	"Continue",
	"Try",
	"Catch",
	"EndTry",
	"Number",
	"String",
	"New",
	"Function",
	"EndFunction",
	"Return",
	"Throw",
	"NeEQ",
	"EQUAL",
	"LE",
	"GE",
	"OR",
	"And",
	"True",
	"False",
	"Undefind",
	"Export",
	"Date",
	"GoTo",
	"Execute",
	"LOW_PREC",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UNARMinus",
	"UNARYPlus",
	"'('",
	"')'",
	"'?'",
	"'['",
	"']'",
	"'.'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line .\grammar.y:379

//line yacctab:1
var yyExca = [...]int8{
	-1, 0,
	1, 1,
	4, 16,
	5, 16,
	-2, 8,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 2,
	-2, 17,
	-1, 3,
	9, 8,
	10, 8,
	35, 8,
	-2, 16,
}

const yyPrivate = 57344

const yyLast = 617

var yyAct = [...]uint8{
	71, 7, 122, 115, 7, 5, 148, 49, 195, 45,
	19, 8, 22, 159, 55, 138, 160, 73, 184, 142,
	75, 74, 141, 53, 116, 116, 70, 70, 128, 7,
	95, 86, 70, 76, 82, 69, 72, 78, 80, 81,
	66, 63, 67, 68, 64, 65, 91, 92, 116, 7,
	55, 58, 59, 60, 61, 62, 56, 57, 58, 59,
	60, 30, 18, 116, 116, 98, 176, 131, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 178, 174, 116, 116, 113, 61, 62, 56, 57,
	58, 59, 60, 140, 41, 93, 63, 44, 70, 90,
	127, 169, 4, 134, 31, 164, 70, 130, 126, 61,
	62, 56, 57, 58, 59, 60, 129, 99, 7, 180,
	146, 143, 30, 133, 89, 140, 139, 70, 52, 51,
	167, 135, 52, 51, 147, 151, 132, 7, 7, 203,
	70, 114, 155, 156, 85, 83, 157, 152, 41, 94,
	145, 97, 197, 88, 161, 123, 163, 177, 121, 165,
	209, 168, 40, 175, 158, 31, 170, 175, 7, 179,
	84, 162, 7, 181, 125, 124, 153, 185, 56, 57,
	58, 59, 60, 7, 7, 118, 77, 188, 191, 192,
	186, 190, 187, 51, 189, 6, 7, 137, 199, 46,
	204, 202, 7, 201, 43, 30, 207, 205, 139, 25,
	54, 139, 208, 136, 26, 210, 51, 116, 52, 51,
	13, 21, 171, 27, 44, 12, 28, 52, 51, 33,
	32, 41, 52, 51, 15, 14, 52, 51, 52, 51,
	47, 2, 36, 37, 39, 173, 38, 23, 31, 183,
	200, 30, 35, 34, 193, 25, 172, 194, 3, 20,
	26, 42, 1, 52, 51, 16, 13, 21, 50, 27,
	44, 12, 28, 149, 48, 33, 32, 41, 11, 196,
	15, 14, 24, 150, 87, 30, 29, 96, 36, 37,
	39, 166, 38, 23, 31, 79, 52, 51, 35, 34,
	9, 21, 17, 206, 44, 20, 10, 42, 0, 33,
	32, 41, 0, 0, 0, 0, 0, 0, 30, 0,
	0, 0, 36, 37, 39, 0, 38, 23, 31, 0,
	0, 0, 35, 34, 21, 0, 0, 44, 0, 20,
	0, 42, 33, 32, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 37, 39, 0, 38,
	23, 31, 0, 0, 0, 35, 34, 0, 66, 63,
	67, 68, 20, 65, 42, 66, 63, 67, 68, 64,
	65, 0, 61, 62, 56, 57, 58, 59, 60, 61,
	62, 56, 57, 58, 59, 60, 0, 0, 0, 198,
	66, 63, 67, 68, 64, 65, 182, 116, 0, 0,
	0, 0, 0, 0, 61, 62, 56, 57, 58, 59,
	60, 0, 0, 0, 144, 0, 0, 0, 0, 0,
	0, 0, 66, 63, 67, 68, 64, 65, 0, 0,
	66, 63, 67, 68, 64, 65, 61, 62, 56, 57,
	58, 59, 60, 154, 61, 62, 56, 57, 58, 59,
	60, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 66, 63, 67, 68, 64, 65, 117, 0, 66,
	63, 67, 68, 64, 65, 61, 62, 56, 57, 58,
	59, 60, 119, 61, 62, 56, 57, 58, 59, 60,
	0, 0, 0, 66, 63, 67, 68, 64, 65, 0,
	0, 66, 63, 67, 68, 64, 65, 61, 62, 56,
	57, 58, 59, 60, 0, 61, 62, 56, 57, 58,
	59, 60, 66, 63, 67, 68, 64, 65, 0, 66,
	63, 67, 68, 0, 0, 0, 61, 62, 56, 57,
	58, 59, 60, 61, 62, 56, 57, 58, 59, 60,
	63, 67, 68, 0, 0, 0, 0, 63, 0, 68,
	0, 0, 0, 61, 62, 56, 57, 58, 59, 60,
	61, 62, 56, 57, 58, 59, 60, 44, 0, 0,
	0, 0, 33, 32, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 37, 39, 0, 38,
	0, 0, 0, 0, 0, 35, 34,
}

var yyPact = [...]int16{
	197, -1000, -1000, 197, -1000, 223, -1000, -17, 493, -1000,
	-1000, -1000, -1000, -1000, 310, 310, -1000, -1000, -48, -1000,
	310, 310, -1000, 70, -1000, 310, 277, 310, 243, 135,
	-31, 91, -1000, -1000, 310, 310, -1000, -1000, -1000, -1000,
	-1000, 87, -32, -1000, -1000, 223, -1000, -1000, 243, -1000,
	-1000, -1000, -1000, 310, 53, -1000, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, -1000,
	493, -53, -1000, 310, 78, -1000, 56, -1000, 464, 177,
	472, 440, 128, 147, 167, 166, 310, -1000, 310, -1000,
	-1000, -1000, -1000, -34, 310, 310, -1000, -1000, 493, -48,
	-6, -6, -1000, -1000, -1000, 123, 123, 33, 329, 500,
	520, 527, 56, 1, -1000, 310, -1000, 243, 84, 310,
	-1000, -1000, 77, -1000, -40, -43, 58, 361, 310, 57,
	401, -1000, -1000, 259, 114, 432, 243, 243, 188, 156,
	-1000, 146, 146, -1000, -1000, 42, -1000, 310, 115, 310,
	80, -53, -1000, 60, -1000, 234, 214, -1000, -1000, 19,
	26, -1000, 149, 18, -1000, 401, 103, 243, 393, -1000,
	-45, 243, -1000, -1000, 45, 146, 560, -1000, 45, 310,
	-1000, 223, 243, 243, -1000, 232, -1000, 26, -1000, 142,
	336, 259, 228, -1000, 142, 243, 129, 147, -1000, -1000,
	-1000, 243, 292, 147, 211, 124, -1000, 211, -1000, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 240, 5, 102, 306, 302, 300, 6, 291, 287,
	21, 11, 15, 286, 10, 13, 16, 20, 284, 0,
	283, 12, 282, 8, 279, 2, 278, 62, 162, 274,
	7, 268, 265, 3, 262, 258, 195, 257, 249, 222,
	213, 210, 197,
}

var yyR1 = [...]int8{
	0, 34, 34, 34, 35, 35, 36, 36, 13, 13,
	12, 12, 32, 37, 5, 5, 2, 2, 1, 1,
	9, 9, 29, 29, 23, 23, 24, 24, 6, 7,
	7, 8, 8, 22, 38, 4, 39, 4, 40, 4,
	20, 20, 20, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 19, 19, 27, 27, 27, 27, 27, 18,
	18, 42, 26, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 17, 17, 10, 10, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 16, 16, 16, 15,
	15, 15, 21, 21, 21, 28, 25, 25, 30, 31,
	33, 41,
}

var yyR2 = [...]int8{
	0, 0, 1, 2, 1, 2, 1, 1, 0, 1,
	0, 1, 5, 0, 11, 10, 0, 1, 1, 3,
	0, 1, 1, 1, 0, 1, 3, 4, 7, 0,
	5, 0, 2, 8, 0, 9, 0, 8, 0, 6,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 3, 1, 4, 4, 2, 4, 1,
	1, 0, 6, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 1,
	2, 1, 1, 0, 1, 1, 3, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 2, 3, 0,
	1, 3, 2, 5, 4, 1, 1, 3, 1, 1,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -34, -1, -35, -3, -2, -36, -19, -11, -6,
	-4, -26, 28, 23, 38, 37, -32, -5, -27, -14,
	62, 24, -21, 50, -22, 12, 17, 26, 29, -13,
	8, 51, 33, 32, 56, 55, 45, 46, 49, 47,
	-28, 34, 64, 7, 27, -2, -36, -1, -29, -30,
	-31, 5, 4, 40, -41, 67, 55, 56, 57, 58,
	59, 53, 54, 40, 43, 44, 39, 41, 42, -17,
	-11, -19, -17, 65, -10, -17, -11, -28, -11, 18,
	-11, -11, -2, 10, 35, 9, 62, -18, 62, 33,
	8, -11, -11, 8, 62, 62, -9, -3, -11, -27,
	-11, -11, -11, -11, -11, -11, -11, -11, -11, -11,
	-11, -11, -11, -11, 63, -33, 6, 13, 8, 20,
	21, 30, -25, 8, 8, 8, -10, -11, 62, -10,
	-11, 66, -17, -2, 19, -11, -40, -42, -12, -33,
	48, 62, 62, 63, 63, -10, 63, -33, -7, 14,
	-20, -19, -21, 62, 21, -2, -2, -30, 8, -15,
	-16, 8, 25, -15, 63, -11, -8, 15, -11, 21,
	-21, -39, 22, 31, 63, -33, 40, 8, 63, -33,
	16, -2, 13, -38, 63, -2, -12, -16, -14, -12,
	-11, -2, -2, 22, -37, -23, -24, 10, 63, -7,
	22, -23, -2, 10, -25, -2, 11, -25, -30, 36,
	-30,
}

var yyDef = [...]int8{
	-2, -2, -2, -2, 18, 0, 4, 82, 44, 45,
	46, 47, 48, 49, 83, 83, 6, 7, 52, 63,
	83, 0, 79, 0, 81, 0, 0, 0, 16, 0,
	54, 0, 87, 88, 0, 0, 91, 92, 93, 94,
	95, 0, 0, 9, 105, 3, 5, 17, 20, 22,
	23, 108, 109, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	84, 82, 51, 0, 0, 85, 78, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 57, 0, 59,
	60, 89, 90, 102, 83, 0, 19, 21, 43, 53,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 0, 64, 83, 110, 16, 0, 0,
	38, 61, 10, 106, 0, 0, 0, 0, 83, 0,
	0, 56, 86, 29, 0, 0, 16, 16, 0, 0,
	11, 99, 99, 55, 58, 0, 104, 0, 31, 0,
	0, 40, 41, 0, 36, 0, 0, 12, 107, 0,
	100, 96, 0, 0, 103, 0, 0, 16, 0, 34,
	0, 16, 39, 62, 10, 0, 0, 97, 10, 0,
	28, 32, 16, 16, 42, 0, 13, 101, 98, 24,
	0, 29, 0, 37, 24, 16, 25, 0, 33, 30,
	35, 16, 0, 0, 0, 0, 15, 0, 26, 14,
	27,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 59, 3, 3,
	62, 63, 57, 55, 6, 56, 67, 58, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 5,
	54, 3, 53, 64, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 65, 3, 66,
}

var yyTok2 = [...]int8{
	2, 3, 7, 8, 9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 60, 61,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\grammar.y:85
		{
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:86
		{
			if ast, ok := yylex.(*AstNode); ok {
				ast.ModuleStatement.Append(yyDollar[1].body, yylex)
			}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\grammar.y:91
		{
			if ast, ok := yylex.(*AstNode); ok {
				ast.ModuleStatement.Append(yyDollar[2].opt_body, yylex)
			}
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:101
		{
			if ast, ok := yylex.(*AstNode); ok {
				ast.ModuleStatement.Append(yyDollar[1].global_variables, yylex)
			}
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:106
		{
			if ast, ok := yylex.(*AstNode); ok {
				ast.ModuleStatement.Append(yyDollar[1].funcProc, yylex)
			}
		}
	case 8:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\grammar.y:113
		{
			yyVAL.opt_directive = nil
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:114
		{
			yyVAL.opt_directive = &yyDollar[1].token
		}
	case 10:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\grammar.y:117
		{
			yyVAL.opt_export = nil
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:118
		{
			yyVAL.opt_export = &yyDollar[1].token
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\grammar.y:121
		{
			yyVAL.global_variables = make([]GlobalVariables, len(yyDollar[3].identifiers), len(yyDollar[3].identifiers))
			for i, v := range yyDollar[3].identifiers {
				if yyDollar[1].opt_directive != nil {
					yyVAL.global_variables[i].Directive = yyDollar[1].opt_directive.literal
				}

				yyVAL.global_variables[i].Export = yyDollar[4].opt_export != nil
				yyVAL.global_variables[i].Var = VarStatement{Name: v.literal}
			}
		}
	case 13:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\grammar.y:134
		{
			isFunction(true, yylex)
		}
	case 14:
		yyDollar = yyS[yypt-11 : yypt+1]
//line .\grammar.y:135
		{
			yyVAL.funcProc = createFunctionOrProcedure(PFTypeFunction, yyDollar[1].opt_directive, yyDollar[3].token.literal, yyDollar[5].declarations_method_params, yyDollar[7].opt_export, yyDollar[9].opt_explicit_variables, yyDollar[10].opt_body)
			isFunction(false, yylex)
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line .\grammar.y:140
		{
			yyVAL.funcProc = createFunctionOrProcedure(PFTypeProcedure, yyDollar[1].opt_directive, yyDollar[3].token.literal, yyDollar[5].declarations_method_params, yyDollar[7].opt_export, yyDollar[8].opt_explicit_variables, yyDollar[9].opt_body)
		}
	case 16:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\grammar.y:145
		{
			yyVAL.opt_body = nil
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:146
		{
			yyVAL.opt_body = yyDollar[1].body
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:150
		{
			yyVAL.body = Statements{yyDollar[1].stmt}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:151
		{
			if yyDollar[2].token.literal == ":" && len(yyDollar[1].opt_body) > 0 {
				if _, ok := yyDollar[1].opt_body[len(yyDollar[1].opt_body)-1].(*GoToLabelStatement); !ok {
					yylex.Error("semicolon (;) is expected")
				}
			}
			if yyDollar[3].stmt != nil {
				yyVAL.body = append(yyVAL.body, yyDollar[3].stmt)
			}
		}
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\grammar.y:164
		{
			yyVAL.stmt = nil
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:165
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:168
		{
			yyVAL.token = yyDollar[1].token
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:168
		{
			yyVAL.token = yyDollar[1].token
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\grammar.y:172
		{
			yyVAL.opt_explicit_variables = map[string]VarStatement{}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:173
		{
			yyVAL.opt_explicit_variables = yyDollar[1].explicit_variables
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:176
		{
			if vars, err := appendVarStatements(map[string]VarStatement{}, yyDollar[2].identifiers); err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.explicit_variables = vars
			}
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\grammar.y:183
		{
			if vars, err := appendVarStatements(yyDollar[1].explicit_variables, yyDollar[3].identifiers); err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.explicit_variables = vars
			}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\grammar.y:194
		{
			yyVAL.stmt_if = &IfStatement{
				Expression:  yyDollar[2].stmt,
				TrueBlock:   yyDollar[4].opt_body,
				IfElseBlock: yyDollar[5].opt_elseif_list,
				ElseBlock:   yyDollar[6].opt_else,
			}
		}
	case 29:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\grammar.y:204
		{
			yyVAL.opt_elseif_list = Statements{}
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\grammar.y:205
		{
			yyVAL.opt_elseif_list = append(yyDollar[5].opt_elseif_list, &IfStatement{
				Expression: yyDollar[2].stmt,
				TrueBlock:  yyDollar[4].opt_body,
			})
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\grammar.y:213
		{
			yyVAL.opt_else = nil
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\grammar.y:214
		{
			yyVAL.opt_else = yyDollar[2].opt_body
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\grammar.y:217
		{
			yyVAL.stmt = TernaryStatement{
				Expression: yyDollar[3].stmt,
				TrueBlock:  yyDollar[5].stmt,
				ElseBlock:  yyDollar[7].stmt,
			}
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\grammar.y:226
		{
			setLoopFlag(true, yylex)
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
//line .\grammar.y:226
		{
			yyVAL.stmt_loop = &LoopStatement{
				For:  yyDollar[3].token.literal,
				In:   yyDollar[5].stmt,
				Body: yyDollar[8].opt_body,
			}
			setLoopFlag(false, yylex)
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\grammar.y:234
		{
			setLoopFlag(true, yylex)
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\grammar.y:234
		{
			yyVAL.stmt_loop = &LoopStatement{
				For:  yyDollar[2].stmt,
				To:   yyDollar[4].stmt,
				Body: yyDollar[7].opt_body,
			}
			setLoopFlag(false, yylex)
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:242
		{
			setLoopFlag(true, yylex)
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\grammar.y:242
		{
			yyVAL.stmt_loop = &LoopStatement{
				WhileExpr: yyDollar[2].stmt,
				Body:      yyDollar[5].opt_body,
			}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:251
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:252
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:253
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:257
		{
			v := yyDollar[1].stmt
			if tok, ok := yyDollar[1].stmt.(Token); ok {
				v = VarStatement{Name: tok.literal}
			}
			yyVAL.stmt = AssignmentStatement{Var: v, Expr: ExprStatements{Statements: Statements{yyDollar[3].stmt}}}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:264
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:265
		{
			yyVAL.stmt = yyDollar[1].stmt_if
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:266
		{
			yyVAL.stmt = yyDollar[1].stmt_loop
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:267
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:268
		{
			yyVAL.stmt = ContinueStatement{}
			checkLoopOperator(yyDollar[1].token, yylex)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:269
		{
			yyVAL.stmt = BreakStatement{}
			checkLoopOperator(yyDollar[1].token, yylex)
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\grammar.y:270
		{
			yyVAL.stmt = ThrowStatement{Param: yyDollar[2].stmt}
			checkThrowParam(yyDollar[1].token, yyDollar[2].stmt, yylex)
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\grammar.y:271
		{
			yyVAL.stmt = &ReturnStatement{Param: yyDollar[2].stmt}
			checkReturnParam(yyDollar[2].stmt, yylex)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:276
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:277
		{
			yyVAL.stmt = CallChainStatement{Unit: yyDollar[3].stmt, Call: yyDollar[1].stmt}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:283
		{
			yyVAL.stmt = VarStatement{Name: yyDollar[1].token.literal}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\grammar.y:284
		{
			yyVAL.stmt = MethodStatement{Name: yyDollar[1].token.literal, Param: yyDollar[3].exprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\grammar.y:285
		{
			yyVAL.stmt = ItemStatement{Object: yyDollar[1].stmt, Item: yyDollar[3].stmt}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\grammar.y:286
		{
			yyVAL.stmt = MethodStatement{Name: yyDollar[1].token.literal, Param: ExprStatements{Statements: Statements{yyDollar[2].stmt}}}
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\grammar.y:287
		{
			yyVAL.stmt = MethodStatement{Name: yyDollar[1].token.literal, Param: ExprStatements{Statements: Statements{yyDollar[3].stmt}}}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:290
		{
			yyVAL.stmt = yyDollar[1].token.value
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:291
		{
			yyVAL.stmt = VarStatement{Name: yyDollar[1].token.literal}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:294
		{
			setTryFlag(true, yylex)
		}
	case 62:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\grammar.y:294
		{
			yyVAL.stmt = TryStatement{Body: yyDollar[2].opt_body, Catch: yyDollar[5].opt_body}
			setTryFlag(false, yylex)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:300
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:301
		{
			yyVAL.stmt = yyDollar[2].exprs
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:302
		{
			yyVAL.stmt = &ExpStatement{Operation: OpPlus, Left: yyDollar[1].stmt, Right: yyDollar[3].stmt}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:303
		{
			yyVAL.stmt = &ExpStatement{Operation: OpMinus, Left: yyDollar[1].stmt, Right: yyDollar[3].stmt}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:304
		{
			yyVAL.stmt = &ExpStatement{Operation: OpMul, Left: yyDollar[1].stmt, Right: yyDollar[3].stmt}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:305
		{
			yyVAL.stmt = &ExpStatement{Operation: OpDiv, Left: yyDollar[1].stmt, Right: yyDollar[3].stmt}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:306
		{
			yyVAL.stmt = &ExpStatement{Operation: OpMod, Left: yyDollar[1].stmt, Right: yyDollar[3].stmt}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:307
		{
			yyVAL.stmt = &ExpStatement{Operation: OpGt, Left: yyDollar[1].stmt, Right: yyDollar[3].stmt}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:308
		{
			yyVAL.stmt = &ExpStatement{Operation: OpLt, Left: yyDollar[1].stmt, Right: yyDollar[3].stmt}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:309
		{
			yyVAL.stmt = &ExpStatement{Operation: OpEq, Left: yyDollar[1].stmt, Right: yyDollar[3].stmt}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:310
		{
			yyVAL.stmt = &ExpStatement{Operation: OpOr, Left: yyDollar[1].stmt, Right: yyDollar[3].stmt}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:311
		{
			yyVAL.stmt = &ExpStatement{Operation: OpAnd, Left: yyDollar[1].stmt, Right: yyDollar[3].stmt}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:312
		{
			yyVAL.stmt = &ExpStatement{Operation: OpNe, Left: yyDollar[1].stmt, Right: yyDollar[3].stmt}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:313
		{
			yyVAL.stmt = &ExpStatement{Operation: OpLe, Left: yyDollar[1].stmt, Right: yyDollar[3].stmt}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:314
		{
			yyVAL.stmt = &ExpStatement{Operation: OpGe, Left: yyDollar[1].stmt, Right: yyDollar[3].stmt}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\grammar.y:315
		{
			yyVAL.stmt = not(yyDollar[2].stmt)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:316
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\grammar.y:317
		{
			yyVAL.stmt = GoToStatement{Label: yyDollar[2].goToLabel}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:318
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:319
		{
			if tok, ok := yyDollar[1].stmt.(Token); ok {
				yyVAL.stmt = tok.literal
			} else {
				yyVAL.stmt = yyDollar[1].stmt
			}
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\grammar.y:328
		{
			yyVAL.stmt = nil
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:328
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:330
		{
			yyVAL.exprs = ExprStatements{Statements: Statements{yyDollar[1].stmt}}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:331
		{
			yyVAL.exprs.Statements = append(yyVAL.exprs.Statements, yyDollar[3].stmt)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:334
		{
			yyVAL.stmt = yyDollar[1].token.value
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:335
		{
			yyVAL.stmt = yyDollar[1].token.value
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\grammar.y:336
		{
			yyVAL.stmt = unaryMinus(yyDollar[2].stmt)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\grammar.y:337
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:338
		{
			yyVAL.stmt = yyDollar[1].token.value
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:339
		{
			yyVAL.stmt = yyDollar[1].token.value
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:340
		{
			yyVAL.stmt = yyDollar[1].token.value
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:341
		{
			yyVAL.stmt = UndefinedStatement{}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:342
		{
			yyVAL.stmt = yyDollar[1].goToLabel
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:346
		{
			yyVAL.declarations_method_param = *(&ParamStatement{}).Fill(nil, yyDollar[1].token)
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\grammar.y:347
		{
			yyVAL.declarations_method_param = *(&ParamStatement{}).Fill(&yyDollar[1].token, yyDollar[2].token)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:348
		{
			yyVAL.declarations_method_param = *(yyVAL.declarations_method_param.DefaultValue(yyDollar[3].stmt))
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\grammar.y:351
		{
			yyVAL.declarations_method_params = []ParamStatement{}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:352
		{
			yyVAL.declarations_method_params = []ParamStatement{yyDollar[1].declarations_method_param}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:353
		{
			yyVAL.declarations_method_params = append(yyDollar[1].declarations_method_params, yyDollar[3].declarations_method_param)
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\grammar.y:361
		{
			yyVAL.stmt = NewObjectStatement{Constructor: yyDollar[2].token.literal}
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\grammar.y:362
		{
			yyVAL.stmt = NewObjectStatement{Constructor: yyDollar[2].token.literal, Param: yyDollar[4].exprs}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\grammar.y:363
		{
			yyVAL.stmt = NewObjectStatement{Param: yyDollar[3].exprs}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:368
		{
			yyVAL.goToLabel = &GoToLabelStatement{Name: yyDollar[1].token.literal}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:370
		{
			yyVAL.identifiers = []Token{yyDollar[1].token}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\grammar.y:371
		{
			yyVAL.identifiers = append(yyVAL.identifiers, yyDollar[3].token)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:374
		{
			yyVAL.token = yyDollar[1].token
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:375
		{
			yyVAL.token = yyDollar[1].token
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\grammar.y:376
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
